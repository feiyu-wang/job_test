package it.com.service;


import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Date;
import java.util.Properties;
import javax.mail.MessagingException;
import javax.mail.NoSuchProviderException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import org.springframework.stereotype.Repository;



@Repository
public class EmailUser {
	 static
	    {
	    	//读取配置文件的参数
	    	Properties prop = new Properties();
	    	try {
				prop.load(EmailUser.class.getClassLoader().getResourceAsStream("email.properties"));
				
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	    	myEmailAccount = prop.getProperty("myEmailAccount");
	    	myEmailPassword = prop.getProperty("myEmailPassword");
	    	myEmailSMTPHost = prop.getProperty("myEmailSMTPHost");
	    }
	    public static String myEmailAccount ;
	    public static String myEmailPassword;
//	  public static String myEmailAccount = "279656813@qq.com";
//	    public static String myEmailPassword = "gofbgrxommkxbhaj";
	    // fqtnexapzqscbbhg	    
	    //imap  irikmebioiocbfbc
	    // 发件人邮箱的 SMTP 服务器地址, 必须准确, 不同邮件服务器地址不同, 一般(只是一般, 绝非绝对)格式为: smtp.xxx.com
	    // 网易163邮箱的 SMTP 服务器地址为: smtp.163.com
	    public static String myEmailSMTPHost;
	    // 收件人邮箱（替换为自己知道的有效邮箱）
	    public static String  key=null;
	    

	    public String getKey() {
			return key;
		}


		public void setKey(String key) {
			this.key = key;
		}
	    
	    

		public String md5(String inputStr){
	    	
			  BigInteger bigInteger=null;//高精度数据类型
			try {
				MessageDigest md = MessageDigest.getInstance("md5");//说明加密类型
				 byte[] inputData = inputStr.getBytes();//字符转换成字节
			     md.update(inputData); //加密
			     bigInteger = new BigInteger(md.digest());//转换成高精度数字类型 
			    // System.out.println("MD加密后:" + bigInteger.toString()); //输出
			} catch (NoSuchAlgorithmException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
	    }
			return bigInteger.toString();
	    }

		public String  activationCode(){
	    	System.out.println(md5("ab45c9"));
	    	return "aaaaaaaaa";
	    }
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    public String  smtpToEmail(String receiveMailAccount){
	        // 1. 创建参数配置, 用于连接邮件服务器的参数配置
	        Properties props = new Properties();                    // 参数配置
	        props.setProperty("mail.transport.protocol", "smtp");   // 使用的协议（JavaMail规范要求）
	        props.setProperty("mail.smtp.host", myEmailSMTPHost);   // 发件人的邮箱的 SMTP 服务器地址
	        props.setProperty("mail.smtp.auth", "true");            // 需要请求认证
	        
	        // PS: 某些邮箱服务器要求 SMTP 连接需要使用 SSL 安全认证 (为了提高安全性, 邮箱支持SSL连接, 也可以自己开启),
	        //     如果无法连接邮件服务器, 仔细查看控制台打印的 log, 如果有有类似 “连接失败, 要求 SSL 安全连接” 等错误,
	        //     打开下面 /* ... */ 之间的注释代码, 开启 SSL 安全连接。
	        /*
	        // SMTP 服务器的端口 (非 SSL 连接的端口一般默认为 25, 可以不添加, 如果开启了 SSL 连接,
	        //                  需要改为对应邮箱的 SMTP 服务器的端口, 具体可查看对应邮箱服务的帮助,
	        //                  QQ邮箱的SMTP(SLL)端口为465或587, 其他邮箱自行去查看)
	         * 
	         */
	        final String smtpPort = "465";
	        props.setProperty("mail.smtp.port", smtpPort);
	        props.setProperty("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
	        props.setProperty("mail.smtp.socketFactory.fallback", "false");
	        props.setProperty("mail.smtp.socketFactory.port", smtpPort);
	        
             System.out.println(myEmailAccount);
             System.out.println(myEmailPassword);
             System.out.println(myEmailSMTPHost);
	        // 2. 根据配置创建会话对象, 用于和邮件服务器交互
	        Session session = Session.getDefaultInstance(props);
	        session.setDebug(true);                                 // 设置为debug模式, 可以查看详细的发送 log
	        // 3. 创建一封邮件
	        MimeMessage message=null;
			try {
				message = createMimeMessage(session, myEmailAccount, receiveMailAccount);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	        // 4. 根据 Session 获取邮件传输对象
	        Transport transport = null;
			try {
				transport = session.getTransport();
			} catch (NoSuchProviderException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	        // 5. 使用 邮箱账号 和 密码 连接邮件服务器, 这里认证的邮箱必须与 message 中的发件人邮箱一致, 否则报错
	        // 
	        //    PS_01: 成败的判断关键在此一句, 如果连接服务器失败, 都会在控制台输出相应失败原因的 log,
	        //           仔细查看失败原因, 有些邮箱服务器会返回错误码或查看错误类型的链接, 根据给出的错误
	        //           类型到对应邮件服务器的帮助网站上查看具体失败原因。
	        //
	        //    PS_02: 连接失败的原因通常为以下几点, 仔细检查代码:
	        //           (1) 邮箱没有开启 SMTP 服务;
	        //           (2) 邮箱密码错误, 例如某些邮箱开启了独立密码;
	        //           (3) 邮箱服务器要求必须要使用 SSL 安全连接;
	        //           (4) 请求过于频繁或其他原因, 被邮件服务器拒绝服务;
	        //           (5) 如果以上几点都确定无误, 到邮件服务器网站查找帮助。
	        //
	        //    PS_03: 仔细看log, 认真看log, 看懂log, 错误原因都在log已说明。
			
				try {
					transport.connect(myEmailAccount, myEmailPassword);
				} catch (MessagingException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			

	        // 6. 发送邮件, 发到所有的收件地址, message.getAllRecipients() 获取到的是在创建邮件对象时添加的所有收件人, 抄送人, 密送人
	        try {
				transport.sendMessage(message, message.getAllRecipients());
			} catch (MessagingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

	        // 7. 关闭连接
	        try {
				transport.close();
			} catch (MessagingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return  key;
	    }

	    /**
	     * 创建一封只包含文本的简单邮件
	     *
	     * @param session 和服务器交互的会话
	     * @param sendMail 发件人邮箱
	     * @param receiveMail 收件人邮箱
	     * @return
	     * @throws Exception
	     */
	    public  MimeMessage createMimeMessage(Session session, String sendMail, String receiveMail) throws Exception {
	        // 1. 创建一封邮件
	        MimeMessage message = new MimeMessage(session);

	        // 2. From: 发件人
	        message.setFrom(new InternetAddress(sendMail, "某宝网", "UTF-8"));

	        // 3. To: 收件人（可以增加多个收件人、抄送、密送）
	        message.setRecipient(MimeMessage.RecipientType.TO, new InternetAddress(receiveMail, "XX用户", "UTF-8"));

	        // 4. Subject: 邮件主题
	        message.setSubject("华信智原", "UTF-8");
	        //得到激活码
	        key=getKey();
	        System.out.println("=====1="+key);
	        // 5. Content: 邮件正文（可以使用html标签）
	        message.setContent("<a href='http://localhost:8080/springlogin/emailyanzheng.action?key="+key+"'>点击激活</a>", "text/html;charset=UTF-8");

	        // 6. 设置发件时间
	        message.setSentDate(new Date());

	        // 7. 保存设置
	        message.saveChanges();

	        return message;
	    }
	    public static void main(String[] args) {
	    	EmailUser m=new EmailUser();
	    	//m.activationCode();
	    	System.out.println("*"+m.smtpToEmail("994415585@qq.com"));
	    	try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	    	//m.activationCode();
		}
	  
}
